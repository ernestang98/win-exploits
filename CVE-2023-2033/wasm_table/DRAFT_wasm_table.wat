(module

    ;; Initialize 16 bytes with hex data, starting at offset 0.
    (data 
        "\ca\fe\ca\fe\ca\fe\ca\fe"
        "\de\ad\be\ef\de\ad\be\ef"
    )


    ;; Define a type which is a function that accepts an i32 and will return an i32
    (type $int2int (func (param i32) (result i32)))

    ;; import jstimes3 from env, jstimes3 will be a function which is of $int2int 
    (import "env" "jstimes3" (func $jstimes3 (type $int2int)))

    ;; import tbl0 from js0, tbl0 will be a WASM Table for 2 function references
    (import "js0" "tbl0" (table 4 funcref)) ;; must be equal or lesser

    ;; import tbl1 from js1, tbl1 will be a WASM Table for 4 function references
    (import "js1" "tbl1" (table 6 funcref)) ;; must be equal or lesser

    ;; declare a function which will return 42
    ;; this is index 1
    (func $f42 (result i32) 
    	i32.const 42
    )

    ;; declare a function which will return 83
    ;; this is index 2
    (func $f83 (result i32) 
	i32.const 83
    )
  
    ;; declare function table at index 0 with $f42 and $f83 
    ;; start at offset one for the first wasmtable imported
    (elem (i32.const 0) $f42 $f83)
    ;; start at offset two for the first wasmtable imported
    (elem (i32.const 2) $f42 $f83)

    ;; declare an exportable function of type $int2int  that will just return 16?
    (func (export "times2") (type $int2int) 
	(i32.const 16)
    )

    ;; declare an exportable function of type $int2int  that will call $jstimes3 with 16 as the argument
    (func (export "pwn") (type $int2int) 
	(i32.const 16) 
        (call $jstimes3)
    )

    (func (export "write") (param $p i32) (result i32)
        (local $local_var i32)
        (local $intermediate i32)
        (local.set $local_var (i32.const 10))
        (i32.add (local.get $p) (i32.const 1))
    )

    (func (export "write2") (param $p i32) (result i32)
        (local $local_var i32)
        (local $intermediate i32)
        (local.set $local_var (i32.const 10))
        (local.set $intermediate (i32.add (local.get $p) (local.get $local_var)))
        (i32.add (local.get $intermediate) (i32.const 1))
    )

    (func (export "write3") (result i32) (result i32)
	(i32.const 16) 
	(i32.const 17) 
    )

    (func (export "write4") (result i32 i32)
	(i32.const 16) 
	(i32.const 17) 
    )

)