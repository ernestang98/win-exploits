;; D:\v8.out\msvc_2017\x64.release_____anvbis\d8.exe --allow-natives-syntax --shell wasm_table.js
;; wat2wasm wasm_table.wat

(module

    ;; Initialize 16 bytes with hex data, starting at offset 0.
    (data 
        "\ca\fe\ca\fe\ca\fe\ca\fe"
        "\de\ad\be\ef\de\ad\be\ef"
    )

    ;; Define a type which is a function that accepts an i32 and will return an i32
    (type $int2int (func (param i32) (result i32)))

    ;; import jstimes3 from env, jstimes3 will be a function which is of $int2int 
    (import "env" "jstimes3" (func $jstimes3 (type $int2int))) ;; this should be index 0
    (import "env0" "jstimes4" (func $jstimes4 (type $int2int)))
    (import "env1" "jstimes5" (func $jstimes5 (type $int2int)))
    (import "env2" "jstimes6" (func $jstimes6 (type $int2int)))

    ;; Import tables from the environment
    (import "js0" "tbl0" (table $t0 3 funcref))

    ;; Define functions
    (func $f1 (result i32) (i32.const 1)) ;; this should be index 4
    (func $f2 (result i32) (i32.const 2))
    (func $f3 (result i32) (i32.const 3))
    (func $f4 (result i32) (i32.const 4))

    ;; Initialize Table 0
    (elem $e0 $t0 (i32.const 0) $f1 $f2 $f3 $f4)

    ;; declare an exportable function of type $int2int  that will just return 16?
    (func (export "times2") (type $int2int) ;; this should be index 8
	    (i32.const 16)
    )

    ;; declare an exportable function of type $int2int  that will call $jstimes3 with 16 as the argument
    (func (export "pwn") (type $int2int) 
	    (i32.const 16) 
        (call $jstimes3)
    )

)