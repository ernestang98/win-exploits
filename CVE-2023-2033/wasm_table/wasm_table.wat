;; D:\v8.out\msvc_2017\x64.release_____anvbis\d8.exe --allow-natives-syntax --shell wasm_table.js
;; wat2wasm wasm_table.wat

(module

    ;; Initialize 16 bytes with hex data, starting at offset 0.
    (data 
        "\ca\fe\ca\fe\ca\fe\ca\fe"
        "\de\ad\be\ef\de\ad\be\ef"
    )

    ;; Define a type which is a function that accepts an i32 and will return an i32
    (type $int2int (func (param i32) (result i32)))

    ;; import jstimes3 from env, jstimes3 will be a function which is of $int2int 
    (import "env" "jstimes3" (func $jstimes3 (type $int2int)))
    (import "env2" "jstimes32" (func $jstimes32 (type $int2int)))

    ;; Import tables from the environment
    (import "js0" "tbl0" (table $t0 3 funcref))  ;; Table 0 with 2 entries
    (import "js1" "tbl1" (table $t1 10 funcref))  ;; Table 1 with 2 entries
    (import "js2" "tbl2" (table $t2 2 funcref))  ;; Table 1 with 2 entries

    ;; Define functions
    (func $f1 (result i32) (i32.const 1))
    (func $f2 (result i32) (i32.const 2))
    (func $f3 (result i32) (i32.const 3))
    (func $f4 (result i32) (i32.const 4))

    ;; Initialize Table 0
    (elem $e0 $t0 (i32.const 0) $f1 $f2)  ;; Populate Table 0 starting at index 0

    ;; Initialize Table 1
    (elem $e1 $t1 (i32.const 0) $f3 $f4)  ;; Populate Table 1 starting at index 0

    ;; declare an exportable function of type $int2int  that will just return 16?
    (func (export "times2") (type $int2int) 
	(i32.const 16)
    )

    ;; declare an exportable function of type $int2int  that will call $jstimes3 with 16 as the argument
    (func (export "pwn") (type $int2int) 
	(i32.const 16) 
        (call $jstimes3)
        (call $jstimes32)
    )

    (func (export "write") (param $p i32) (result i32)
        (local $local_var i32)
        (local $intermediate i32)
        (local.set $local_var (i32.const 10))
        (i32.add (local.get $p) (i32.const 1))
    )

    (func (export "write2") (param $p i32) (result i32)
        (local $local_var i32)
        (local $intermediate i32)
        (local.set $local_var (i32.const 10))
        (local.set $intermediate (i32.add (local.get $p) (local.get $local_var)))
        (i32.add (local.get $intermediate) (i32.const 1))
    )

    (func (export "write3") (result i32) (result i32)
	(i32.const 16) 
	(i32.const 17) 
    )

    (func (export "write4") (result i32 i32)
	(i32.const 16) 
	(i32.const 17) 
    )

)