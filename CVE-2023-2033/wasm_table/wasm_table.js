function sep() {
    console.log("==============================================================================================================");
}

function dp(_object) {
    %DebugPrint(_object)
}

function dpp(_object) {
    %DebugPrintPtr(_object)
}

const tbl0Table = new WebAssembly.Table({
    initial: 5,
    element: "anyfunc"
});

const tbl1Table = new WebAssembly.Table({
    initial: 13,
    element: "anyfunc"
});

const tbl2Table = new WebAssembly.Table({
    initial: 13,
    element: "anyfunc"
});

const importObject = {
    env: {
        jstimes3: (n) => 3 * n,
    },
    env2: {
        jstimes32: (n) => 3 * n,
    },
    js0: { tbl0: tbl0Table },
    js1: { tbl1: tbl1Table },
    js2: { tbl2: tbl2Table }
};

const importObject2 = {
    env: {
        jstimes3: (n) => 3 * n,
    },
    env2: {
        jstimes32: (n) => 3 * n,
    },
    js2: { tbl2: tbl0Table },
    js0: { tbl0: tbl1Table },
    js1: { tbl1: tbl2Table }
};


var code = read("wasm_table.wasm", "binary")
var module = new WebAssembly.Module(code);
var instance = new WebAssembly.Instance(module, importObject);
var instance2 = new WebAssembly.Instance(module, importObject2);
//console.log(instance.exports.write4())
//dp(instance)

//tbl0Table.set(0, instance.exports.write4) 
//tbl0Table.set(1, instance.exports.write3) 
//tbl0Table.set(2, instance.exports.write2) 

//tbl1Table.set(0, instance.exports.times2) 
//tbl1Table.set(1, instance.exports.pwn) 
//tbl1Table.set(2, instance.exports.write) 

dp(instance);
sep();
dp(instance2);
sep();
dp(tbl0Table);
sep();
dp(tbl1Table);
sep();
dp(tbl2Table);

